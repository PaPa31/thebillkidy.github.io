# Jekyll site
# Package your Jekyll site using the jekyll/builder Docker container image.
# Add steps that build, test, save build artifacts, deploy, and more:
# https://aka.ms/yaml

trigger:
- development

pool:
  vmImage: 'Ubuntu-16.04'

steps:
- task: UseRubyVersion@0 # See: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/use-ruby-version?view=azdevops
  displayName: 'Use Ruby >= 2.5'

- script: 'gem install bundler'
  displayName: 'Install Bundler'

- script: 'bundle install'
  displayName: 'Install Jekyll and Dependencies'

- script: 'bundle exec jekyll build -d $(Build.ArtifactStagingDirectory)'
  displayName: 'Build Jekyll Static Site'

# Azure Devops will run git config and get -c http.extraheader="AUTHORIZATION: basic ***" for Authentication to our repo
# This way we will be able to push everything without the need for an authentication token as e.g. https://thebillkidy:$GH_TOKEN@github.com/#{REPO_SLUG}.git
# We will now configure git in our ArtifactStagingDirectory (this way we don't have to clean )
- script: 'cd $(Build.Repository.LocalPath); git checkout master; git checkout -b azure-pipelines-build'
  displayName: 'Create Build Branch based on Master'

- script: >
    cd $(Build.Repository.LocalPath);
    git rm -rf .; git clean -fxd;
  displayName: 'Clean Build Branch'

- script: >
    git config --global user.email "xavier.geerinck@gmail.com";
    git config --global user.name "Xavier Geerinck";
  displayName: 'Configure Git User'

- script: >
    cp -a $(Build.ArtifactStagingDirectory)/. $(Build.Repository.LocalPath);
  displayName: 'Copy Artifact Files to Cleaned Build Branch'

- script: >
    cd $(Build.Repository.LocalPath);
    git add --all;
    git commit -m"Pipelines-Bot: Updated site";
  displayName: 'Create our Commit'

- script: >
    git checkout master;
    git merge azure-pipelines-build;
    git branch -d azure-pipelines-build;
  displayName: 'Merge azure-pipelines-build into master'

- script: >
    git push;
  displayName: 'Push changes to remote'

# The below will generate a .zip for us that we can download
# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Artifact: _site'
#   inputs:
#     ArtifactName: _site